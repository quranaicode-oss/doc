@using System.Data
@using System.IO
@using System.Linq

@{
    ViewBag.Title = "MAS ERP";
    Layout = "~/Views/ERP2/_Layout.cshtml";

    string docsPath = Path.Combine(HttpRuntime.AppDomainAppPath, "Docs");
    string fid = DBHelper.GetPar("fid", Request);
    string dpath = DBHelper.GetPar("p", Request);
    if (!string.IsNullOrEmpty(dpath))
    {
        docsPath = Path.Combine(docsPath, dpath);
    }

    string[] directories = Directory.Exists(docsPath) ? Directory.GetDirectories(docsPath) : new string[0];
    string userLang = Request.Cookies["UserLang"]?.Value ?? "ar";
    Dictionary<string, string> t = new Dictionary<string, string>();

    if (userLang.ToLower() == "en")
    {
        t["fileManagementSystem"] = "Documents Management System"; t["fileInfo"] = "File Info"; t["fileData"] = "File Data"; t["editFile"] = "File Settings"; t["listTab"] = "Archive File List"; t["selectFileInfo"] = "Select a file to view its information."; t["selectFileData"] = "Select a file to view its data."; t["selectFileEdit"] = "Select a file to edit its information."; t["selectFileList"] = "Select a file to show the archive list."; t["topRec"] = "Number of Records"; t["recordFrom"] = "From Date"; t["recordTo"] = "To Date"; t["refresh"] = "Refresh"; t["errorLoading"] = "An error occurred while loading data."; t["fileName"] = "File Name"; t["date"] = "Date"; t["documentNumber"] = "Document Number"; t["userEmail"] = "User Email"; t["options"] = "Options"; t["view"] = "View"; t["upload"] = "Upload"; t["download"] = "Download"; t["edit"] = "Edit"; t["delete"] = "Delete"; t["print"] = "Print"; t["confirmDelete"] = "Are you sure you want to delete?"; t["newRecord"] = "New Record"; t["modalTitle"] = "Document Details"; t["code"] = "Code"; t["sectionName"] = "Section Name"; t["sectionNotes"] = "Section Notes"; t["documentType"] = "Document Type"; t["documentCode"] = "Document Code"; t["fullCode"] = "Full Code"; t["documentDescription"] = "Document Description"; t["language"] = "Language"; t["filePath"] = "File Path"; t["fileExtension"] = "File Extension"; t["documentStatus"] = "Document Status"; t["documentStatusNotes"] = "Document Status Notes"; t["startDate"] = "Start Date"; t["showdata"] = "Add Data"; t["docInfoEdit"] = "Edit Document Information"; t["docInfoData"] = "Document Information"; t["close"] = "Close"; t["errorNotFound"] = "Document data not found."; t["errorProcessing"] = "An error occurred while processing the request."; t["jsonSaved"] = "JSON file has been saved."; t["new"] = "New"; t["first"] = "First"; t["last"] = "Last"; t["prev"] = "Previous"; t["next"] = "Next"; t["searchByDocNumber"] = "Search by Document Number"; t["duplicate"] = "Duplicate"; t["documentCreateDate"] = "Document Creation Date"; t["notes"] = "Notes"; t["loading"] = "Loading..."; t["save"] = "Save"; t["downloadPdf"] = "Download PDF";
        t["addNewCodedDocument"] = "Add New Coded Document"; t["docType"] = "Doc Type"; t["deptAbbr"] = "Dept. Abbr."; t["deptNum"] = "Dept. No."; t["procNum"] = "Proc. No."; t["docName"] = "Document Name"; t["generatedFileName"] = "Generated File Name"; t["selectFile"] = "Select File"; t["uploadNewCodedFile"] = "Upload New Coded File";
    }
    else
    {
        t["fileManagementSystem"] = "نظام إدارة المستندات"; t["fileInfo"] = "معلومات المستند"; t["fileData"] = "بيانات المستند"; t["editFile"] = "إعدادات المستند"; t["listTab"] = "قائمة أرشيف المستندات"; t["selectFileInfo"] = "اختر مستنداً لعرض معلوماته."; t["selectFileData"] = "اختر مستنداً لعرض بياناته."; t["selectFileEdit"] = "اختر مستنداً لتعديل معلوماته."; t["selectFileList"] = "اختر مستنداً لعرض قائمة الأرشيف"; t["topRec"] = "عدد السجلات"; t["recordFrom"] = "من تاريخ"; t["recordTo"] = "إلى تاريخ"; t["refresh"] = "تحديث"; t["errorLoading"] = "حدث خطأ أثناء تحميل البيانات."; t["fileName"] = "اسم المستند"; t["date"] = "التاريخ"; t["documentNumber"] = "رقم المستند"; t["userEmail"] = "البريد الإلكتروني للمستخدم"; t["options"] = "الخيارات"; t["view"] = "عرض"; t["upload"] = "رفع"; t["download"] = "تحميل"; t["edit"] = "تعديل"; t["delete"] = "حذف"; t["print"] = "طباعة"; t["confirmDelete"] = "هل أنت متأكد أنك تريد الحذف؟"; t["newRecord"] = "سجل جديد"; t["modalTitle"] = "تفاصيل المستند"; t["code"] = "الكود"; t["sectionName"] = "اسم القسم"; t["sectionNotes"] = "ملاحظات القسم"; t["documentType"] = "نوع المستند"; t["documentCode"] = "رمز المستند"; t["fullCode"] = "الكود الكامل"; t["documentDescription"] = "وصف المستند"; t["language"] = "اللغة"; t["filePath"] = "مسار المستند"; t["fileExtension"] = "امتداد المستند"; t["documentStatus"] = "حالة المستند"; t["documentStatusNotes"] = "ملاحظات حالة المستند"; t["startDate"] = "تاريخ البدء"; t["showdata"] = "إضافة بيانات"; t["docInfoEdit"] = "تعديل معلومات المستند"; t["docInfoData"] = "معلومات المستند"; t["close"] = "إغلاق"; t["errorNotFound"] = "لم يتم العثور على بيانات المستند."; t["errorProcessing"] = "حدث خطأ أثناء معالجة الطلب."; t["jsonSaved"] = "تم حفظ ملف JSON."; t["new"] = "جديد"; t["first"] = "الأول"; t["last"] = "الأخير"; t["prev"] = "السابق"; t["next"] = "التالي"; t["searchByDocNumber"] = "البحث برقم المستند"; t["duplicate"] = "تكرار"; t["documentCreateDate"] = "تاريخ إنشاء المستند"; t["notes"] = "ملاحظات"; t["loading"] = "جاري التحميل..."; t["save"] = "حفظ"; t["downloadPdf"] = "تحميل PDF";
        t["addNewCodedDocument"] = "إضافة مستند جديد"; t["docType"] = "نوع المستند"; t["deptAbbr"] = "اختصار الإدارة"; t["deptNum"] = "رقم القسم"; t["procNum"] = "رقم الإجراء"; t["docName"] = "اسم المستند"; t["generatedFileName"] = "اسم الملف النهائي"; t["selectFile"] = "اختر الملف"; t["uploadNewCodedFile"] = "رفع الملف المكوّد الجديد";
    }
}
<style>
    /* General Styles & Variables */
    :root {
        --primary-color: #007bff;
        --primary-hover: #0056b3;
        --secondary-color: #6c757d;
        --success-color: #28a745;
        --danger-color: #dc3545;
        --light-bg: #f8f9fa;
        --light-card-bg: #ffffff;
        --light-text: #212529;
        --light-border: #dee2e6;
        --dark-bg: #1a1a1a;
        --dark-card-bg: #2c2c2c;
        --dark-text: #f8f9fa;
        --dark-border: #444;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --dark-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    body {
        background-color: var(--light-bg);
        color: var(--light-text);
        transition: background-color 0.3s, color 0.3s;
    }

    .header-icon {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .loader-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .loader-spinner {
        border: 8px solid #f3f3f3;
        border-top: 8px solid var(--primary-color);
        border-radius: 50%;
        width: 60px;
        height: 60px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Folder & File Styles */
    .folder-container {
        display: flex;
        flex-wrap: wrap;
        gap: 25px;
        justify-content: center;
        padding: 20px;
    }

    .folder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 160px;
        height: 140px;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 12px;
        background-color: var(--light-card-bg);
        border: 1px solid var(--light-border);
        text-align: center;
        box-shadow: var(--shadow);
    }

        .folder a {
            text-decoration: none;
            color: inherit;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }

    .folder-icon {
        font-size: 48px;
        transition: transform 0.3s ease;
        margin-bottom: 10px;
        color: var(--primary-color);
    }

    .folder-name {
        font-size: 14px;
        font-weight: 600;
        padding: 0 5px;
    }

    .folder:hover {
        transform: translateY(-8px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
    }

        .folder:hover .folder-icon {
            transform: scale(1.1);
        }

    .file-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        padding: 20px;
    }

    .file {
        display: flex;
        align-items: center;
        border: 1px solid var(--light-border);
        padding: 12px 15px;
        border-radius: 8px;
        box-shadow: var(--shadow);
        transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s;
        cursor: pointer;
        background-color: var(--light-card-bg);
    }

        .file i {
            font-size: 28px;
            margin-right: 15px;
            color: var(--primary-color);
        }

        .file:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 122, 255, 0.2);
            border-color: var(--primary-color);
        }

    .file-name {
        font-size: 14px;
        font-weight: bold;
        text-align: left;
        word-break: break-all;
    }

    #fileSearchInput {
        margin-bottom: 20px;
    }

    /* Tabs */
    .tabs-container {
        margin: 20px;
        border-bottom: 2px solid var(--light-border);
    }

    .tab {
        display: inline-block;
        padding: 12px 25px;
        cursor: pointer;
        font-weight: bold;
        border-radius: 8px 8px 0 0;
        transition: background-color 0.3s, color 0.3s;
        border: 2px solid transparent;
        border-bottom: none;
        position: relative;
        bottom: -2px;
    }

        .tab.active {
            border-color: var(--light-border);
            border-bottom-color: var(--light-bg);
            color: var(--primary-color);
            background-color: var(--light-bg);
        }

        .tab:not(.active):hover {
            background-color: #e9ecef;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .tab-content-container {
        background-color: var(--light-bg);
        padding: 25px;
        border: 2px solid var(--light-border);
        border-top: none;
        border-radius: 0 0 8px 8px;
    }

    #documentContent td {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent table {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent tr {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent tbody {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent thead {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent tfoot {
        background-color: #ffffff;
        color: #000000;
    }
    #documentContent th {
        background-color: #ffffff;
        color: #000000;
    }

   
    /* Editor Styles - Overriding dark mode */
    #documentContent {
        background-color: #ffffff;
        color: #000000;
        width: 100%;
        max-width: none;
        min-height: 29.7cm;
        padding: 2cm;
        margin: 0 auto;
        box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        box-sizing: border-box;
        outline: none;
    }

        #documentContent p, #documentContent div.editable-paragraph {
            margin-bottom: 0.5em;
        }

        #documentContent table, #documentContent th, #documentContent td {
            border: 1px solid #cccccc;
            color: #000000;
        }

        #documentContent table {
            table-layout: fixed;
            width: 100%;
        }

        #documentContent td, #documentContent th {
            padding: 0px;
            vertical-align: top;
            word-wrap: break-word;
        }

        #documentContent .editable-cell:focus, #documentContent .editable-paragraph:focus {
            background-color: #e6f7ff;
        }

    /* General UI Elements */
    .modern-table {
        width: 100%;
        border-collapse: collapse;
        background-color: var(--light-card-bg);
        font-size: 14px;
    }

        .modern-table thead {
            background-color: var(--primary-color);
        }

        .modern-table th {
            color: white;
            font-weight: 600;
            text-align: start;
            padding: 12px 15px;
        }

        .modern-table tbody tr {
            border-bottom: 1px solid var(--light-border);
            transition: background-color 0.2s ease;
        }

            .modern-table tbody tr:hover {
                background-color: #f0f7ff;
            }

        .modern-table td {
            padding: 12px 15px;
            vertical-align: middle;
        }

    .toolbar {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
        padding: 8px 15px;
        border: 1px solid var(--light-border);
        border-radius: 10px;
        background-color: var(--light-bg);
        flex-wrap: wrap;
    }

    .toolbar-button {
        background: none;
        border: none;
        cursor: pointer;
        margin: 2px 6px;
        color: #555;
        padding: 5px;
        border-radius: 4px;
        transition: all 0.2s;
    }

        .toolbar-button i {
            font-size: 20px;
        }

        .toolbar-button:hover {
            background-color: rgba(0, 122, 255, 0.1);
            color: var(--primary-color);
        }

    .docx-new-btn {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background-color: var(--success-color);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 12px 20px;
        font-weight: bold;
        box-shadow: var(--dark-shadow);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        z-index: 1000;
    }

        .docx-new-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
            background-color: #218838;
        }

    .form-control {
        border-radius: 6px;
        border: 1px solid #ced4da;
        padding: 8px 12px;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(0, 122, 255, 0.25);
        }

    .modal-content {
        border-radius: 8px;
        background-color: var(--light-card-bg);
    }

    .modal-header {
        background-color: var(--primary-color);
        color: white;
        border-bottom: none;
    }

    .card {
        border: none;
        border-radius: 10px;
        box-shadow: var(--shadow);
        margin-bottom: 20px;
        background-color: var(--light-card-bg);
    }

    .card-header {
        background-color: var(--danger-color);
        color: white;
        border-bottom: none;
        padding: 15px;
        text-align: center;
        border-radius: 10px 10px 0 0;
    }

    .card-body {
        padding: 20px;
    }

    .record-title.text-danger {
        color: #fff;
    }

    /* New Coded File Upload Section */
    #new-file-upload-section {
        background-color: var(--light-card-bg);
        border: 1px solid var(--light-border);
        border-radius: 10px;
        padding: 25px;
        margin: 20px;
        box-shadow: var(--shadow);
    }

    .coding-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        align-items: flex-end;
    }

    #generatedFileNamePreview {
        background-color: #e9ecef;
        border: 1px dashed #ced4da;
        padding: 10px;
        border-radius: 6px;
        font-family: 'Courier New', Courier, monospace;
        font-weight: bold;
        margin-top: 15px;
        text-align: center;
    }

    /* Dark Version Styles */
    body.dark-version {
        background-color: var(--dark-bg);
        color: var(--dark-text);
    }

        body.dark-version .folder {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
            box-shadow: var(--dark-shadow);
        }

        body.dark-version .folder-name {
            color: var(--dark-text);
        }

        body.dark-version .folder:hover {
            background-color: #495057;
        }

        body.dark-version .file {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
            box-shadow: var(--dark-shadow);
        }

            body.dark-version .file i {
                color: #4da3ff;
            }

            body.dark-version .file:hover {
                box-shadow: 0 8px 20px rgba(77, 163, 255, 0.2);
                border-color: #4da3ff;
            }

        body.dark-version .file-name {
            color: var(--dark-text);
        }

        body.dark-version .tabs-container {
            border-bottom-color: var(--dark-border);
        }

        body.dark-version .tab.active {
            border-color: var(--dark-border);
            border-bottom-color: var(--dark-bg);
            color: #4da3ff;
            background-color: var(--dark-bg);
        }

        body.dark-version .tab:not(.active):hover {
            background-color: #3a3a3a;
        }

        body.dark-version .tab-content-container {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
        }

        body.dark-version .toolbar {
            border-color: var(--dark-border);
            background-color: var(--dark-card-bg);
        }

        body.dark-version .toolbar-button {
            color: #ccc;
        }

            body.dark-version .toolbar-button:hover {
                background-color: rgba(77, 163, 255, 0.2);
                color: #4da3ff;
            }

        body.dark-version .modal-content {
            background-color: var(--dark-card-bg);
            color: var(--dark-text);
            border: 1px solid var(--dark-border);
        }

        body.dark-version .modal-header {
            background-color: var(--primary-hover);
        }

        body.dark-version .form-control {
            background-color: #333;
            border-color: #555;
            color: white;
        }

            body.dark-version .form-control:focus {
                border-color: #4da3ff;
                box-shadow: 0 0 0 0.2rem rgba(77, 163, 255, 0.25);
            }

        body.dark-version .card {
            background-color: var(--dark-card-bg);
            box-shadow: var(--dark-shadow);
        }

        body.dark-version .card-header {
            background-color: #c82333;
        }

        body.dark-version .modern-table {
            background-color: var(--dark-card-bg);
        }

            body.dark-version .modern-table tbody tr {
                border-bottom-color: var(--dark-border);
            }

                body.dark-version .modern-table tbody tr:hover {
                    background-color: #3a3f44;
                }

        body.dark-version #new-file-upload-section {
            background-color: var(--dark-card-bg);
            border-color: var(--dark-border);
            box-shadow: var(--dark-shadow);
        }

        body.dark-version #generatedFileNamePreview {
            background-color: #3a3a3a;
            border-color: #555;
            color: #eee;
        }
</style>

<div class="header-icon">
    <a href="../../ERP2/doc"><i class="fa fa-arrow-left"></i></a>
    <h6>@t["fileManagementSystem"]</h6>
</div>
<h5>@dpath</h5>
<hr />

<div class="modal fade" id="addNewFileModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">@t["new"] Document</h5><button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="$('#addNewFileModal').modal('hide')"><span aria-hidden="true">&times;</span></button></div>
            <div class="modal-body">
                <div class="form-group"><label for="newFileUpload">Select File (DOCX):</label><input type="file" id="newFileUpload" accept=".docx" class="form-control" /></div>
                <button id="uploadNewFileButton" class="btn btn-primary">@t["upload"]</button>
                <div id="uploadNewFileStatus" class="mt-2"></div>
            </div>
        </div>
    </div>
</div>

<div class="folder-container">
    @foreach (string directory in directories)
    {
        string folderName = Path.GetFileName(directory);
        if (!string.IsNullOrWhiteSpace(folderName) && folderName.ToLower().Trim() != "forms")
        {
            string[] folderParts = folderName.Split('-');
            if (folderParts.Length > 1 && int.TryParse(folderParts[0].Trim(), out int sortnum))
            {
                string dcname = folderParts[1].Trim();
                string[] dcnameWords = dcname.Split(' ');
                string shortCode = string.Join("&", dcnameWords.Select(w => w.Length > 0 ? w.Substring(0, 1).ToUpper() : ""));
                if (shortCode.Length == 1 && dcnameWords.Length == 1 && dcname.Length > 2)
                {
                    shortCode = dcname.Substring(0, 3).ToUpper();
                }
                DBHelper.Exceutsql($"exec DC_Departments_insert N'{dcname.Replace("'", "''")}',N'{folderName.Replace("'", "''")}',N'{shortCode}',{sortnum},'{DBHelper.CompId()}','{fid}'");
            }
        }
    }
    @{
        DataTable dtDocs = DBHelper.gettabel($"select ID, Department_name_lang, Department_name, short_code, sort, icon, color as icon_color, Docs_path from Dc_Departments_data('{userLang}','{DBHelper.CompId()}','{fid}')");
        foreach (DataRow rw in dtDocs.Rows)
        {
            string href = $"/ERP2/doc?p={HttpUtility.UrlEncode(rw["Docs_path"].ToString())}&fid={rw["ID"]}";
            string iconHtml = !string.IsNullOrEmpty(rw["icon"].ToString())
                ? $"<i style='color:{rw["icon_color"]}' class='fa {rw["icon"]}'></i>"
                : "<i class='fa fa-folder'></i>";
            <div class="folder">
                <a href="@href">
                    <div class="folder-icon">@Html.Raw(iconHtml)</div>
                    <div class="folder-name">@rw["sort"] - (@rw["short_code"]) @(userLang == "ar" ? rw["Department_name_lang"] : rw["Department_name"])</div>
                </a>
            </div>
        }
    }
</div>

@{
    string FormsdocsPath = Path.Combine(docsPath, "Forms");
    if (Directory.Exists(FormsdocsPath))
    {
        <div class="row w-100">
            <hr />
            <div class="tabs-container">
                <div class="tab active" data-tab="tab-files">@t["fileName"]</div>
                <div class="tab" data-tab="tab-info">@t["fileInfo"]</div>
                <div class="tab" data-tab="tab-edit">@t["editFile"]</div>
                <div class="tab" data-tab="tab-data">@t["fileData"]</div>
                <div class="tab" data-tab="tab-docList">@t["listTab"]</div>
                <div class="tab" data-tab="tab-new-coded-file">@t["addNewCodedDocument"]</div>
            </div>

            <div id="tab-files" class="tab-content active">
                <div class="container mb-3 mt-3">
                    <input type="text" id="fileSearchInput" class="form-control" placeholder="Search for files...">
                </div>
                <div class="file-container">
                    @foreach (string file in Directory.GetFiles(FormsdocsPath).Where(f => !Path.GetFileName(f).Contains("-v(")))
                    {
                        string fileName = Path.GetFileName(file);
                        string fileExtension = Path.GetExtension(fileName).ToLower();
                        string iconClass = "fa-file-o"; // Default icon
                        if (fileExtension == ".docx" || fileExtension == ".doc") { iconClass = "fa-file-word-o"; }
                        else if (fileExtension == ".xlsx" || fileExtension == ".xls") { iconClass = "fa-file-excel-o"; }
                        else if (fileExtension == ".pdf") { iconClass = "fa-file-pdf-o"; }

                        string filpath = file.Replace(HttpRuntime.AppDomainAppPath, "").Replace("\\", "/");
                        string slins = $"DC_insert N'{fileName.Replace("'", "''")}' ,N'{filpath.Replace("'", "''")}' ,'{fid}','{DBHelper.CompId()}'";
                        DataTable dtFile = DBHelper.Gettabel(SqlProtect.procedstring(slins), DBHelper.accesstokenwrite);
                        if (dtFile != null && dtFile.Rows.Count > 0 && dtFile.Columns.Contains("ID"))
                        {
                            string docid = dtFile.Rows[0]["ID"].ToString();
                            <div class="file">
                                <i class="fa @iconClass"></i>
                                <span data-docid="@docid" data-filpath="@filpath" class="file-name">@fileName</span>
                            </div>
                        }
                        else
                        {
                            <div class="file"><i class="fa fa-exclamation-triangle text-danger"></i><span class="file-name text-danger">@fileName (Error)</span></div>
                        }
                    }
                </div>
            </div>

            <div id="tab-info" class="tab-content"><p>@t["selectFileInfo"]</p></div>
            <div id="tab-edit" class="tab-content"><p>@t["selectFileEdit"]</p></div>
            <div id="tab-data" class="tab-content"><p>@t["selectFileData"]</p></div>
            <div id="tab-docList" class="tab-content">
                <div class="doclist-filters container card p-4 mb-4">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-3"><label for="topRec" class="form-label">@t["topRec"]</label><input type="number" id="topRec" value="10" min="1" class="form-control"></div>
                        <div class="col-md-3"><label for="recordFrom" class="form-label">@t["recordFrom"]</label><input type="date" id="recordFrom" class="form-control"></div>
                        <div class="col-md-3"><label for="recordTo" class="form-label">@t["recordTo"]</label><input type="date" id="recordTo" class="form-control"></div>
                        <div class="col-md-3"><button id="refreshDocList" class="btn btn-primary w-100 mb-0">@t["refresh"]</button></div>
                    </div>
                </div>
                <div id="docListContent" class="container"></div>
            </div>

            <div id="tab-new-coded-file" class="tab-content">
                <!-- New Coded File Upload Section -->
                <div id="new-file-upload-section" class="col-12">
                    <h4 class="mb-4">@t["addNewCodedDocument"]</h4>
                    <div class="coding-grid">
                        <div class="form-group">
                            <label for="docTypeSelect">@t["docType"]</label>
                            <select id="docTypeSelect" class="form-control">
                                <option value="F">F - Form</option>
                                <option value="I">I - Instruction</option>
                                <option value="L">L - List</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="deptAbbrSelect">@t["deptAbbr"]</label>
                            <select id="deptAbbrSelect" class="form-control">
                                <option>R&D</option>
                                <option>P&C&P</option>
                                <option>MAI</option>
                                <option>C&S</option>
                                <option>PRO</option>
                                <option>S&R</option>
                                <option>L&B</option>
                                <option>QMS</option>
                                <option>A&R</option>
                                <option>LAB</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="deptNumInput">@t["deptNum"]</label>
                            <input type="number" id="deptNumInput" class="form-control" placeholder="01" min="1" max="99" step="1">
                        </div>
                        <div class="form-group">
                            <label for="procNumInput">@t["procNum"]</label>
                            <input type="number" id="procNumInput" class="form-control" placeholder="01" min="1" max="99" step="1">
                        </div>
                        <div class="form-group" style="grid-column: 1 / -1;">
                            <label for="docNameInput">@t["docName"]</label>
                            <input type="text" id="docNameInput" class="form-control" placeholder="@t["docName"]">
                        </div>
                    </div>
                    <div class="form-group mt-3">
                        <label for="codedFileUpload">@t["selectFile"]</label>
                        <input type="file" id="codedFileUpload" class="form-control" accept=".docx,.xlsx,.pdf">
                    </div>
                    <div class="form-group mt-3">
                        <label>@t["generatedFileName"]</label>
                        <div id="generatedFileNamePreview"></div>
                    </div>
                    <button id="uploadCodedFileButton" class="btn btn-success mt-3 w-100">@t["uploadNewCodedFile"]</button>
                </div>
            </div>
        </div>
    }
}
<div class="modal fade" id="attachmentModal" role="dialog">
    <div class="modal-dialog modal-lg" style="max-width:1200px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" onclick="$('#attachmentModal').modal('hide')" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Attached Files</h4>
            </div>
            <div class="modal-body"><iframe id="attachmentIframe" src="" style="width:100%; height:700px; border:0;"></iframe></div>
            <div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal" onclick="$('#attachmentModal').modal('hide')">Close</button></div>
        </div>
    </div>
</div>
<div id="global-loader" class="loader-overlay"><div class="loader-spinner"></div></div>
<button id="addNewDocxButton" class="docx-new-btn">@t["new"] <i class="fa fa-plus"></i></button>

<script>
    var userLang = getCookie("UserLang") || 'ar';
    var documentData = {};
    var currentDocId = '';
    var currentFilePath = '';
    var currentFileVersionPath = '';
    var isRequestInProgress = false;
    var currentFullCode = '';
    var currentDocumentName = '';
    const t = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(t));

    function getCookie(c) { let n = c + "="; let d = decodeURIComponent(document.cookie); let a = d.split(';'); for (let i = 0; i < a.length; i++) { let f = a[i].trim(); if (f.indexOf(n) == 0) return f.substring(n.length, f.length); } return ""; }
    function uuid() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => { const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }
    function showLoading() { $('#global-loader').css('display', 'flex'); }
    function hideLoading() { $('#global-loader').hide(); }

    function upgradeJsonFormat(data) {
        const json = data.json || data;
        if (!json || !json.Elements || !Array.isArray(json.Elements)) return data;
        const firstElement = json.Elements[0];
        if (firstElement && firstElement.Content && Array.isArray(firstElement.Content) && firstElement.Content[0] && typeof firstElement.Content[0].Formatting !== 'undefined') {
            return data;
        }
        const v2Json = {
            Direction: json.Direction || json.defualtdocumentDirection || 'LTR',
            Elements: [],
            FileVersionPath: json.filePath || json.FileVersionPath || ''
        };
        json.Elements.forEach(el => {
            if (el.Type === "Paragraph") {
                const newPara = { ID: el.ID, Type: "Paragraph", Content: [], Formatting: el.Formatting || {} };
                if (el.Content) {
                    const contentArray = Array.isArray(el.Content) ? el.Content : [{ Text: el.Content }];
                    contentArray.forEach(run => {
                        if (typeof run === 'string') {
                            newPara.Content.push({ Text: run, Formatting: {}, FormattingValues: {} });
                            return;
                        }
                        const newRun = { Text: run.Text, Formatting: {}, FormattingValues: {} };
                        if (run.Bold) newRun.Formatting.Bold = true;
                        if (run.Italic) newRun.Formatting.Italic = true;
                        if (run.Underline) newRun.Formatting.Underline = true;
                        if (run.Color) newRun.FormattingValues.ColorValue = run.Color;
                        if (run.FontSize) newRun.FormattingValues.FontSize = run.FontSize;
                        if (run.FontName) newRun.FormattingValues.FontFamily = run.FontName;
                        if (run.Background) newRun.FormattingValues.ShadingValue = run.Background;
                        newPara.Content.push(newRun);
                    });
                }
                v2Json.Elements.push(newPara);
            } else if (el.Type === "Table") {
                const newTable = { ID: el.ID, Type: "Table", Content: [], Borders: el.Borders || {} };
                if (el.Content && Array.isArray(el.Content)) {
                    el.Content.forEach(row => {
                        const newRow = { Cells: [], Borders: row.Borders || {} };
                        if (row.Cells && Array.isArray(row.Cells)) {
                            row.Cells.forEach(cell => {
                                const newCell = { Content: cell.Content, GridSpan: cell.GridSpan || 1, VerticalMerge: cell.VerticalMerge, FormattedRuns: [], Checkboxes: cell.Checkboxes || [], Borders: cell.Borders || {}, rowSpan: cell.rowSpan, Direction: cell.Direction, Alignment: cell.Alignment };
                                if (cell.FormattedRuns && Array.isArray(cell.FormattedRuns)) {
                                    cell.FormattedRuns.forEach(run => {
                                        const newRun = { Text: run.Text, Formatting: {}, FormattingValues: {} };
                                        if (run.Bold) newRun.Formatting.Bold = true;
                                        if (run.Italic) newRun.Formatting.Italic = true;
                                        if (run.Underline) newRun.Formatting.Underline = true;
                                        if (run.Color) newRun.FormattingValues.ColorValue = run.Color;
                                        if (run.FontSize) newRun.FormattingValues.FontSize = run.FontSize;
                                        if (run.FontName) newRun.FormattingValues.FontFamily = run.FontName;
                                        if (run.Background) newRun.FormattingValues.ShadingValue = run.Background;
                                        newCell.FormattedRuns.push(newRun);
                                    });
                                }
                                newRow.Cells.push(newCell);
                            });
                        }
                        newTable.Content.push(newRow);
                    });
                }
                v2Json.Elements.push(newTable);
            } else { v2Json.Elements.push(el); }
        });
        return { success: true, json: v2Json };
    }

    function preprocessTemplateData(json) {
        if (!json || !json.Elements || !Array.isArray(json.Elements)) return json;
        json.Elements.forEach(el => {
            const processRuns = (runs) => {
                if (!runs) return [];
                const newRuns = [];
                runs.forEach(run => {
                    if (typeof run.Text !== 'string') {
                        newRuns.push(run);
                        return;
                    }
                    const parts = run.Text.split(/(FORMCHECKBOX)/).filter(p => p);
                    parts.forEach(part => {
                        const newRun = JSON.parse(JSON.stringify(run));
                        newRun.Text = (part === 'FORMCHECKBOX') ? '☐' : part;
                        newRuns.push(newRun);
                    });
                });
                return newRuns;
            };
            if (el.Type === "Paragraph") {
                el.Content = processRuns(el.Content);
            } else if (el.Type === "Table") {
                el.Content?.forEach(row => row.Cells?.forEach(cell => {
                    cell.FormattedRuns = processRuns(cell.FormattedRuns);
                }));
            }
        });
        return json;
    }

    function loadDocList() {
        if (!currentDocId) return;
        showLoading();
        $.post("../../r/j", {
            tb: "DC_Documents_records_list", tbtype: "view",
            cols: "ID,document_name,document_file_serial,Document_date,Email",
            parm: `('${currentDocId}',${$("#topRec").val() || 10},'${$("#recordFrom").val()}','${$("#recordTo").val()}')`
        }).done(data => {
            let tableHtml = `<table class="modern-table"><thead><tr><th>${t.fileName}</th><th>${t.date}</th><th>${t.documentNumber}</th><th>${t.userEmail}</th><th>${t.options}</th></tr></thead><tbody>`;
            (data || []).forEach(doc => {
                tableHtml += `<tr><td>${doc.document_name}</td><td>${new Date(doc.Document_date).toLocaleDateString()}</td><td>${doc.document_file_serial}</td><td>${doc.Email}</td><td><button class="btn btn-sm btn-info edit-file" data-id="${doc.ID}" title="${t.edit}"><i class="fa fa-eye"></i></button></td></tr>`;
            });
            $('#docListContent').html(tableHtml + '</tbody></table>');
        }).fail(() => alert(t.errorLoading)).always(hideLoading);
    }

    function displayDocumentElements() {
        const docContainer = $('#documentContent');
        docContainer.html('');
        if (!documentData?.json?.Elements) {
            docContainer.html(`<p>${t.selectFileData}</p>`);
            return;
        }
        docContainer.css('direction', documentData.json.Direction || 'ltr');
        const formatRunText = (text) => {
            if (typeof text !== 'string') return '';
            const normalized = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
            return normalized
                .split('\n')
                .map(line => escapeHtml(line).replace(/\t/g, '&emsp;').replace(/ /g, '&nbsp;'))
                .join('<br>');
        };

        const renderRun = (run, elementId, runIndex) => {
            if (!run || typeof run.Text === 'undefined') return '';
            let runStyle = '';
            const f = run.Formatting || {};
            const fv = run.FormattingValues || {};
            if (f.Bold) runStyle += 'font-weight: bold;';
            if (f.Italic) runStyle += 'font-style: italic;';
            if (f.Underline) runStyle += 'text-decoration: underline;';
            if (fv.ColorValue) runStyle += `color: #${fv.ColorValue};`;
            if (fv.FontSize) runStyle += `font-size: ${parseInt(fv.FontSize) / 2}pt;`;
            if (fv.FontFamily) runStyle += `font-family: "${fv.FontFamily}";`;
            if (fv.ShadingValue) runStyle += `background-color: #${fv.ShadingValue};`;

            if (run.Text.includes('☐') || run.Text.includes('☑')) {
                const textParts = run.Text.split(/(☐|☑)/).filter(part => part);
                return textParts.map(part => {
                    if (part === '☐' || part === '☑') {
                        const isChecked = part === '☑';
                        return `<input type="checkbox" class="editable-checkbox-symbol" ${isChecked ? 'checked' : ''}>`;
                    } else {
                        return `<span style="${runStyle}">${formatRunText(part)}</span>`;
                    }
                }).join('');
            }
            return `<span style="${runStyle}">${formatRunText(run.Text || '')}</span>`;
        };
function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
        documentData.json.Elements.forEach(element => {
            if (!element || !element.Type) return;
            let elementHtml = '';
            switch (element.Type) {
                case "Paragraph": {
                    let style = `text-align: ${element.Formatting?.Alignment || 'left'}; direction: ${element.Formatting?.Direction || 'inherit'};`;
                    if (element.Formatting?.Shading) style += `background-color: #${element.Formatting.Shading};`;
                    let content = (element.Content || []).map((item, index) => renderRun(item, element.ID, index)).join('');
                    elementHtml = `<div class="editable-paragraph" data-element-id="${element.ID}" style="${style}" contenteditable="true">${content || '&nbsp;'}</div>`;
                    break;
                }
                case "Table": {
                    let tableStyle = `width: 100%; border-collapse: collapse; table-layout: fixed; direction: ${element.Borders?.Direction || 'inherit'};`;
                    
                    let tableBody = (element.Content || []).map((row, rIdx) => {
                        let cellsHtml = (row.Cells || []).map((cell, cIdx) => {
                            if (cell.VerticalMerge === 'Continue') return '';
                          let cellStyle = `direction:${cell.Direction || 'inherit'}; text-align:${cell.Alignment || 'left'} !important; vertical-align: middle; word-break: keep-all;`;
                            if (cell.TextRotation) {
                                cellStyle += `writing-mode: vertical-rl; transform: rotate(180deg);`;
                            }
                            if (cell.Borders?.Background && cell.Borders.Background !== 'auto' && cell.Borders.Background !== 'inherit') cellStyle += `background-color: #${cell.Borders.Background};`;
                            ['Top', 'Bottom', 'Left', 'Right'].forEach(side => {
                                const border = cell.Borders?.[side];
                                if (border && border !== 'inherit' && border !== 'None' && border !== 'nil') cellStyle += `border-${side.toLowerCase()}: 1px ${border.replace('single', 'solid')};`;
                            });
                            let cellContent = (cell.FormattedRuns || []).map((run, runIdx) => renderRun(run, `${element.ID}-${rIdx}-${cIdx}`, runIdx)).join('');
                            return `<td class="editable-cell" ${cell.GridSpan > 1 ? `colspan="${cell.GridSpan}"` : ''} ${cell.rowSpan > 1 ? `rowspan="${cell.rowSpan}"` : ''} style="${cellStyle}" data-element-id="${element.ID}" data-row-index="${rIdx}" data-cell-index="${cIdx}" contenteditable="true">${cellContent || '&nbsp;'}</td>`;
                        }).join('');
                        return `<tr>${cellsHtml}</tr>`;
                    }).join('');
                    elementHtml = `<table class="modern-table" style="${tableStyle}"><tbody>${tableBody}</tbody></table>`;
                    break;
                }
            }
            docContainer.append(elementHtml);
        });
        setupLiveUpdateListeners();
    }

    function setupLiveUpdateListeners() {
        $(document).off('input change', '.editable-paragraph, .editable-cell').on('input change', '.editable-paragraph, .editable-cell', function() {
            const domElement = $(this);
            const elementId = domElement.data('element-id');
            if (!documentData.json || !documentData.json.Elements) return;

            const jsonElement = documentData.json.Elements.find(el => el.ID == elementId);
            if (!jsonElement) return;

            let targetArray;
            if (jsonElement.Type === 'Paragraph') {
                targetArray = jsonElement.Content;
            } else if (jsonElement.Type === 'Table') {
                const rowIndex = domElement.data('row-index');
                const cellIndex = domElement.data('cell-index');
                const cell = jsonElement.Content?.[rowIndex]?.Cells?.[cellIndex];
                if (!cell) return;

                if (!cell.FormattedRuns) {
                    cell.FormattedRuns = [];
                }
                targetArray = cell.FormattedRuns;
            } else {
                return;
            }

            let newTextContent = "";
            domElement.contents().each(function() {
                if (this.nodeType === Node.TEXT_NODE) {
                    newTextContent += this.textContent;
                } else if (this.nodeType === Node.ELEMENT_NODE) {
                    if (this.tagName.toLowerCase() === 'input' && this.type.toLowerCase() === 'checkbox') {
                        newTextContent += this.checked ? '☑' : '☐';
                    } else if (this.tagName.toLowerCase() === 'br') {
                        newTextContent += '\n';
                    } else {
                        newTextContent += $(this).text();
                    }
                }
            });

            newTextContent = newTextContent.replace(/\u00A0/g, ' ').replace(/\u2003/g, '\t');

            if (targetArray.length > 0) {
                targetArray[0].Text = newTextContent;
                if (targetArray.length > 1) {
                    targetArray.splice(1);
                }
            } else {
                targetArray.push({ Text: newTextContent, Formatting: {}, FormattingValues: {} });
            }
        });
    }

    function loadSavedRecord(recordID) {
        showLoading();
        fetch(`../../api/db/mo?action=get_document&db_name=unifood&collection=docs&document_id=${recordID}`)
            .then(res => res.ok ? res.json() : Promise.reject('Record not found'))
            .then(savedData => {
                if (!savedData || !savedData.ID) throw new Error('Invalid record data');
                $('#recordID').val(savedData.ID);
                $('#recordDate').val(new Date(savedData.Document_date).toISOString().split('T')[0]);
                $('#recordNotes').val(savedData.notes);
                $('#documentNumber').text(savedData.document_file_serial);
                $('#documentCreateDate').text(new Date(savedData.begin_date).toLocaleString());
                $('#userEmail').text(savedData.user_insert_email);
                $('.record-title').text(savedData.document_name).removeClass('text-danger');
                let correctVersionPath = savedData.FileVersionPath || currentFilePath;
                currentFileVersionPath = correctVersionPath;
                $.post(`../../api/doc2?id=read`, { filePath: correctVersionPath })
                    .done(templateData => {
                        if (!templateData.success) { throw new Error(templateData.message); }

                        let templateJson = upgradeJsonFormat(templateData).json;
                        templateJson = preprocessTemplateData(templateJson);

                        let savedElements = savedData.documentElements ? upgradeJsonFormat({ json: { Elements: savedData.documentElements } }).json.Elements : [];

                        const finalElements = templateJson.Elements.map(templateEl => {
                            const savedEl = savedElements.find(s => s.ID === templateEl.ID);
                            if (savedEl) {
                                if (templateEl.Type === "Paragraph" && savedEl.Content && savedEl.Content[0]) {
                                    templateEl.Content = [{
                                        Text: savedEl.Content[0].Text || "",
                                        Formatting: templateEl.Content?.[0]?.Formatting || {},
                                        FormattingValues: templateEl.Content?.[0]?.FormattingValues || {}
                                    }];
                                }
                                else if (templateEl.Type === "Table" && savedEl.Content) {
                                    templateEl.Content.forEach((templateRow, rIdx) => {
                                        const savedRow = savedEl.Content[rIdx];
                                        if (savedRow && savedRow.Cells) {
                                            templateRow.Cells.forEach((templateCell, cIdx) => {
                                                const savedCell = savedRow.Cells[cIdx];
                                                if (savedCell) {
                                                    templateCell.Content = savedCell.Content || "";
                                                    templateCell.FormattedRuns = [{
                                                        Text: savedCell.Content || "",
                                                        Formatting: templateCell.FormattedRuns?.[0]?.Formatting || {},
                                                        FormattingValues: templateCell.FormattedRuns?.[0]?.FormattingValues || {}
                                                    }];
                                                }
                                            });
                                        }
                                    });
                                }
                            }
                            return templateEl;
                        });
                        documentData.json.Elements = finalElements;
                        displayDocumentElements();
                    })
                    .fail(() => alert("Failed to load the correct template version."))
                    .always(() => hideLoading());
            })
            .catch(error => {
                alert(t.errorNotFound + "\n" + error.message);
                hideLoading();
            });
    }

    function initializeDocumentView(docId, filePath, recordIdToLoad = null) {
        if (isRequestInProgress) return;
        isRequestInProgress = true;
        showLoading();
        currentDocId = docId;
        currentFilePath = filePath;

        $.when(
            $.post("../../r/j", { tb: "DC_Documents_info", tbtype: "view", cols: "ID,document_name,code,full_code,file_path,document_description", parm: `('${docId}','${userLang}')` }),
            $.post(`../../api/doc2?id=read`, { filePath: currentFilePath })
        ).done(function(infoR, templateR) {
            const infoData = infoR[0]?.[0];
            let templateData = templateR[0];
            if (!infoData) { alert(t.errorNotFound); hideLoading(); return; }
            if (!templateData || !templateData.success) { alert(templateData.message || t.errorLoading); hideLoading(); return; }

            currentFullCode = infoData.full_code;
            currentDocumentName = infoData.document_name;

            let upgradedData = upgradeJsonFormat(templateData);
            documentData.json = preprocessTemplateData(upgradedData.json);
            currentFileVersionPath = documentData.json.FileVersionPath || currentFilePath;

            let infoHtml = `<h3>${infoData.document_name || ''}</h3><p><strong>${t.fullCode}:</strong> ${infoData.full_code}</p><p><strong>${t.documentDescription}:</strong> ${infoData.document_description || ''}</p><p><strong>${t.filePath}:</strong> ${currentFileVersionPath}</p><div class="form-group"><label for="fileUploadTemplate">${t.upload} New Version (docx):</label><input type="file" id="fileUploadTemplate" accept=".docx" class="form-control" /><button id="uploadTemplateButton" class="btn btn-danger mt-2">${t.upload} <i class="fa fa-file-o"></i></button><div id="uploadTemplateStatus"></div></div><button id="downloadButton" class="btn btn-success">${t.download} <i class="fa fa-download"></i></button><button id="viewFullObjectButton" class="btn btn-info">Show (Console) <i class="fa fa-terminal"></i></button>`;
            $('#tab-info').html(infoHtml);
            $('#tab-edit').html(`<iframe src="../../erp2/index?id=da25e35bd64e4840a139dff4306adaa1&tbh=DC_Documents&cname=ID&cid=${infoData.ID}&hidefrm=true" style="width:100%; height:700px; border:0;"></iframe>`);

            let toolbarHtml = `<div class="toolbar" style="direction:ltr"><button class="toolbar-button" id="newButton" title="${t.new}"><i class="fa fa-file-o"></i></button><button class="toolbar-button" id="saveDataButton" title="${t.save}"><i class="fa fa-save"></i></button><button class="toolbar-button" id="firstButton" title="${t.first}"><i class="fa fa-step-backward"></i></button><button class="toolbar-button" id="prevButton" title="${t.prev}"><i class="fa fa-backward"></i></button><input type="text" id="searchInput" placeholder="${t.searchByDocNumber}" class="form-control" style="width:auto; display:inline-block;" /><button class="toolbar-button" id="nextButton" title="${t.next}"><i class="fa fa-forward"></i></button><button class="toolbar-button" id="lastButton" title="${t.last}"><i class="fa fa-step-forward"></i></button><button class="toolbar-button" id="duplicateButton" title="${t.duplicate}"><i class="fa fa-copy"></i></button><button class="toolbar-button" id="downloadDocButton" title="${t.download}"><i class="fa fa-download"></i></button><button class="toolbar-button" id="downloadPdfButton" title="${t.downloadPdf}"><i class="fa fa-file-pdf-o"></i></button><button class="toolbar-button" id="deleteButton" title="${t.delete}"><i class="fa fa-trash"></i></button><button class="toolbar-button" id="printButton" title="${t.print}"><i class="fa fa-print"></i></button><button class="toolbar-button" id="attachmentButton" title="Attachments"><i class="fa fa-paperclip"></i></button></div>`;
            let headerHtml = `<div class="card shadow-sm"><div class="card-header"><h2 class="mb-0 record-title text-danger">${t.newRecord}</h2><small class="file_info_text">${infoData.document_name}-${infoData.full_code}</small></div><div class="card-body"><input type="hidden" id="recordID" value=""><input type="hidden" id="DC_docid" value="${docId}"><div class="row mb-3 align-items-center"><div class="col-md-2"><label class="form-label">${t.documentNumber}:</label><div id="documentNumber" class="fw-bold"></div></div><div class="col-md-2"><label class="form-label">${t.date}:</label><input type="date" id="recordDate" class="form-control"></div><div class="col-md-3"><label class="form-label">${t.userEmail}:</label><div id="userEmail" class="fw-bold"></div></div><div class="col-md-3"><label class="form-label">${t.documentCreateDate}:</label><div id="documentCreateDate" class="fw-bold"></div></div></div><div class="row"><div class="col-md-12"><label class="form-label">${t.notes}:</label><textarea id="recordNotes" class="form-control" rows="2"></textarea></div></div></div></div>`;
            $('#tab-data').html(toolbarHtml + headerHtml + `<div class="tab-content-container"><div id="documentContent"></div></div>`);

            if (recordIdToLoad) {
                loadSavedRecord(recordIdToLoad);
            } else {
                $('#recordID').val(''); $('#documentNumber').text(''); $('#recordDate').val(new Date().toISOString().split('T')[0]);
                $('#userEmail').text(getCookie("UserEmail")); $('#documentCreateDate').text(''); $('#recordNotes').val('');
                $('.record-title').text(t.newRecord).addClass('text-danger');
                displayDocumentElements();
            }
        }).fail((err) => { alert(t.errorLoading); console.error(err); }).always(() => { isRequestInProgress = false; hideLoading(); });
    }

    function simplifyJsonForSave() {
        if (!documentData.json) return JSON.stringify({ Elements: [] });
        const payload = JSON.parse(JSON.stringify(documentData.json));
        payload.Elements.forEach(element => {
            if (element.Type === "Paragraph") {
                if (element.Content && Array.isArray(element.Content)) {
                    element.Content = [{ Text: element.Content.map(run => run.Text || "").join('').trim() }];
                }
            } else if (element.Type === "Table") {
                element.Content?.forEach(row => {
                    row.Cells?.forEach(cell => {
                        cell.Content = (cell.FormattedRuns || []).map(r => r.Text || "").join('').trim();
                        delete cell.FormattedRuns;
                        Object.keys(cell).forEach(key => {
                            if (key !== 'ID' && key !== 'Content') delete cell[key];
                        });
                    });
                });
            }
            Object.keys(element).forEach(key => {
                if (key !== 'ID' && key !== 'Type' && key !== 'Content') delete element[key];
            });
        });
        return JSON.stringify(payload, null, 2);
    }

    // --- New Coded File Upload Logic ---
    function updateGeneratedFileName() {
        const docType = $('#docTypeSelect').val();
        const deptAbbr = $('#deptAbbrSelect').val();
        const deptNum = $('#deptNumInput').val().padStart(2, '0');
        const procNum = $('#procNumInput').val().padStart(2, '0');
        const docName = $('#docNameInput').val().trim();
        const fileInput = $('#codedFileUpload')[0];
        let extension = '';

        if (fileInput.files.length > 0) {
            const originalFileName = fileInput.files[0].name;
            extension = originalFileName.substring(originalFileName.lastIndexOf('.'));
        }

        if (docName) {
            const generatedName = `${docType}-${deptAbbr}-${deptNum}-${procNum} ${docName}${extension}`;
            $('#generatedFileNamePreview').text(generatedName);
        } else {
            $('#generatedFileNamePreview').text('');
        }
    }

    $(document).ready(function () {
        $('#recordFrom').val(new Date(new Date().setDate(new Date().getDate() - 30)).toISOString().substr(0, 10));
        $('#recordTo').val(new Date().toISOString().substr(0, 10));

        $('#addNewDocxButton').click(() => $('#addNewFileModal').modal('show'));

        $('.file-container').on('click', '.file-name', function() {
            initializeDocumentView($(this).data('docid'), $(this).data('filpath'));
            $('.tab[data-tab="tab-data"]').click();
        });

        $('.tabs-container').on('click', '.tab', function() {
            const tabId = $(this).data('tab');
            $('.tab, .tab-content').removeClass('active');
            $(this).addClass('active');
            $('#' + tabId).addClass('active');
            if(tabId === 'tab-docList' && currentDocId) loadDocList();
        });

        $('#docListContent').on('click', '.edit-file', function () {
            initializeDocumentView(currentDocId, currentFilePath, $(this).data('id'));
            $('.tab[data-tab="tab-data"]').click();
        });

        $('body').on('click', '#saveDataButton', function() {
            if (!currentDocId) return;
            showLoading();
            const recordID = $('#recordID').val() || uuid();
            $('#recordID').val(recordID);
            const procQuery = `DC_Documents_records_insert '${recordID}','${currentDocId}','${$("#recordDate").val()}','${$("#recordNotes").val().replace(/'/g, "''")}','${getCookie("CompId")}','${getCookie("UserBranshID")}','${getCookie("UserID")}'`;
            $.post("../../erp/procedq", { id: procQuery })
            .done(data => {
                const recordData = data[0];
                const jsonPayloadForSave = JSON.parse(simplifyJsonForSave());
                const payloadForMongo = { ...recordData, documentElements: jsonPayloadForSave.Elements, FileVersionPath: currentFileVersionPath };
                fetch(`../../api/db/mo?action=save_documents`, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ db_name: 'unifood', collection: 'docs', documents: [payloadForMongo] })
                }).then(res => res.json()).then(saveResult => {
                    if(saveResult[0].success) {
                        alert(t.jsonSaved);
                        $('#documentNumber').text(recordData.document_file_serial);
                        $('.record-title').text(recordData.document_name).removeClass('text-danger');
                    } else { alert(t.errorProcessing); }
                }).catch(() => alert(t.errorProcessing)).finally(hideLoading);
            }).fail(() => { alert(t.errorProcessing); hideLoading(); });
        });

        function downloadFile(action, extension) {
            if (!currentDocId) return;
            const simplifiedJson = JSON.parse(simplifyJsonForSave());
            simplifiedJson.FileVersionPath = currentFileVersionPath;
            const finalJsonInput = JSON.stringify(simplifiedJson);
            const body = { jsonInput: finalJsonInput, recordid: $("#recordID").val() };
            showLoading();
            fetch(`../../api/doc2?id=${action}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
                body: $.param(body)
            })
            .then(res => res.ok ? res.blob() : res.json().then(err => Promise.reject(err.message || 'Failed to generate file')))
            .then(blob => {
                const version = documentData.json.Version || 0;
                const serial = $('#documentNumber').text() || 'new';
                const fileName = `${currentFullCode} ${currentDocumentName}_v(${version})_s(${serial}).${extension}`;
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();
            })
            .catch(err => alert(t.errorProcessing + ': ' + err))
            .finally(hideLoading);
        }

        $('body').on('click', '#downloadDocButton', () => downloadFile('write', 'docx'));
        $('body').on('click', '#downloadPdfButton', () => downloadFile('pdf', 'pdf'));

        $('body').on('click', '#printButton', function() {
            if(!currentDocId) return;
            const simplifiedJson = JSON.parse(simplifyJsonForSave());
            simplifiedJson.FileVersionPath = currentFileVersionPath;
            const finalJsonInput = JSON.stringify(simplifiedJson);
            const body = { jsonInput: finalJsonInput, recordid: $("#recordID").val() };
            showLoading();
            fetch('../../api/doc2?id=html', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'},
                body: $.param(body)
            })
            .then(res => res.ok ? res.text() : res.json().then(err => Promise.reject(err.message || 'Failed to generate HTML')))
            .then(html => {
                const printWindow = window.open('', '_blank');
                printWindow.document.write(html);
                printWindow.document.close();
                setTimeout(() => { try { printWindow.print(); } catch(e) { console.error("Print failed", e); printWindow.close(); } }, 500);
            }).catch(err => alert(t.errorProcessing + ': ' + err)).finally(hideLoading);
        });

        $(document).on('click', '#viewFullObjectButton', function () {
            if (!currentFilePath) {
                alert('الرجاء تحديد ملف أولاً.');
                return;
            }

            console.log(`%c[INFO] جارِ طلب الكائن الكامل للملف: ${currentFilePath}`, 'color: blue; font-weight: bold;');

            const originalText = $(this).html();
            $(this).html('جارِ التحميل... <i class="fa fa-spinner fa-spin"></i>').prop('disabled', true);

            const url = `../../API/doc?id=fullObject&filePath=${encodeURIComponent(currentFilePath)}`;

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`فشل الطلب: ${response.status} ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('%c[SUCCESS] تم استلام بنية المستند بنجاح:', 'color: green; font-weight: bold;');

                        console.dir(data.documentTree);

                    } else {
                        throw new Error(data.message || 'حدث خطأ غير معروف في الـ API.');
                    }
                })
                .catch(error => {
                    console.error('%c[ERROR] حدث خطأ أثناء طلب الكائن الكامل:', 'color: red; font-weight: bold;', error);
                    alert(`فشل تحميل الكائن: ${error.message}`);
                })
                .finally(() => {
                    $('#viewFullObjectButton').html(originalText).prop('disabled', false);
                });
        });


$('body').on('click', '#uploadNewFileButton, #uploadTemplateButton', function () {
    const isTemplateUpload = $(this).is('#uploadTemplateButton');
    const fileInput = isTemplateUpload ? $('#fileUploadTemplate')[0] : $('#newFileUpload')[0];
    if (fileInput.files.length === 0) { alert('Please select a file to upload.'); return; }

    showLoading();
    var formData = new FormData();
    formData.append('file', fileInput.files[0]);
    formData.append('p', '@dpath');

    if (isTemplateUpload) {
        formData.append('baseFilePath', currentFilePath);
    }

    $.ajax({
        url: '../../api/doc2?id=upload_new_file',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            if (response.success) {
                alert(response.message || "File uploaded successfully.");
                if (!isTemplateUpload) $('#addNewFileModal').modal('hide');
                location.reload();
            } else {
                alert(response.message || t.errorProcessing);
            }
        },
        error: () => alert(t.errorProcessing),
        complete: () => hideLoading()
    });
});
        // Event listeners for the new coded file upload section
        $('#docTypeSelect, #deptAbbrSelect, #deptNumInput, #procNumInput, #docNameInput, #codedFileUpload').on('input change', updateGeneratedFileName);

        $('#uploadCodedFileButton').click(function() {
            const fileInput = $('#codedFileUpload')[0];
            const generatedName = $('#generatedFileNamePreview').text();

            if (fileInput.files.length === 0) {
                alert(t["selectFile"]);
                return;
            }
            if (!generatedName) {
                alert("Please fill all fields to generate a file name.");
                return;
            }

            showLoading();
            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            formData.append('p', '@dpath');
            formData.append('codedFileName', generatedName); // Send the generated name to the server

            $.ajax({
                url: '../../api/doc2?id=upload_coded_file',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function(response) {
                    if (response.success) {
                        alert(response.message || "File uploaded successfully.");
                        location.reload();
                    } else {
                        alert(response.message || t.errorProcessing);
                    }
                },
                error: () => alert(t.errorProcessing),
                complete: () => hideLoading()
            });
        });


        $('body').on('click', '#newButton', () => initializeDocumentView(currentDocId, currentFilePath));
        $('body').on('click', '#attachmentButton', function() {
            const recordId = $("#recordID").val();
            if(recordId) {
                $('#attachmentIframe').attr('src', `../../erp2/index?id=da25e35bd64e4840a139dff4306adaa1&tbh=DC_Documents_records_attched&cname=record_id&cid=${recordId}&hidefrm=true`);
                $('#attachmentModal').modal('show');
            } else { alert("Please save the document first."); }
        });
        $('body').on('click', '#refreshDocList', loadDocList);
        $('body').on('click', '#deleteButton', function () {
            const recordId = $("#recordID").val();
            if (!recordId) { alert("No record selected to delete."); return; }
            if (!confirm(t.confirmDelete)) return;
            showLoading();
            fetch(`../../api/db/mo?action=delete_document&db_name=unifood&collection=docs&document_id=${recordId}`, { method: 'POST' })
            .then(res => res.json()).then(data => { if(data.success) { alert("Deleted successfully"); initializeDocumentView(currentDocId, currentFilePath); } else { alert(t.errorProcessing); } })
            .catch(() => alert(t.errorProcessing)).finally(hideLoading);
        });
        $('body').on('click', '#duplicateButton', function () {
            $("#recordID").val(''); $("#documentNumber").text('');
            $(".record-title").text(t.newRecord).addClass("text-danger");
            $("#recordDate").val(new Date().toISOString().split('T')[0]);
        });
        const navigateRecords = (tbName) => {
            if(!currentDocId) return;
            let currentDocNumber = $("#documentNumber").text() || '0';
            $.post("../../r/j", { tb: tbName, tbtype: "view", cols: "ID", parm: `('${currentDocId}','${currentDocNumber}')` })
             .done(data => { if(data?.[0]?.ID) loadSavedRecord(data[0].ID); else alert(t.errorNotFound); })
             .fail(()=> alert(t.errorLoading));
        };
        $('body').on('click', '#firstButton', () => navigateRecords('DC_Documents_records_first'));
        $('body').on('click', '#prevButton', () => navigateRecords('DC_Documents_records_previous'));
        $('body').on('click', '#nextButton', () => navigateRecords('DC_Documents_records_next'));
        $('body').on('click', '#lastButton', () => navigateRecords('DC_Documents_records_last'));
        $('body').on('keydown', '#searchInput', function (e) {
            if (e.key === 'Enter') {
                const docNum = $(this).val();
                if(!currentDocId || !docNum) return;
                $.post("../../r/j", { tb: "DC_Documents_records_number", tbtype: "view", cols: "ID", parm: `('${currentDocId}','${docNum}')` })
                 .done(data => { if(data?.[0]?.ID) loadSavedRecord(data[0].ID); else alert(t.errorNotFound); })
                 .fail(()=> alert(t.errorLoading));
            }
        });
        $('body').on('click', '#downloadButton', function() {
             if (currentFileVersionPath) {
                let downloadUrl = '/' + currentFileVersionPath.replace(/\\/g, '/').split('/').map(encodeURIComponent).join('/');
                window.open(downloadUrl, '_blank');
            }
        });
        $('#fileSearchInput').on('input', function () {
            const searchTerm = $(this).val().toLowerCase().trim();
            $('.file-container .file').each(function () {
                const fileName = $(this).find('.file-name').text().toLowerCase();
                const isVisible = searchTerm === '' || fileName.includes(searchTerm);
                $(this).toggle(isVisible);
            });
        });
    });
</script>
