@using System
@using System.Collections.Generic
@using System.Data
@using System.IO
@using System.Linq
@using System.Web
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using DocumentFormat.OpenXml.Drawing
@using Spire.Xls
@using Spire.Doc
@using Mas.com.eg.Models

@functions {
    public class DocumentConverter
    {
        public class JsonPayload
        {
            public string FileVersionPath { get; set; }
            public List<JsonElement> Elements { get; set; }
        }

        public class JsonElement
        {
            public int ElementId { get; set; }
            public string Type { get; set; }
            public object Content { get; set; }
        }

        public class JsonParagraph
        {
            public string Text { get; set; }
        }

        public class JsonTable
        {
            public List<List<JsonTableCell>> Rows { get; set; } = new List<List<JsonTableCell>>();
        }

        public class JsonTableCell
        {
            public List<JsonElement> Elements { get; set; } = new List<JsonElement>();
        }

        public class JsonImage
        {
            public string Base64 { get; set; }
            public string ContentType { get; set; }
        }

        public class JsonCheckBox
        {
            public bool IsChecked { get; set; }
            public string Text { get; set; }
        }

        public class FileResult
        {
            public bool Success { get; set; }
            public string Message { get; set; }
            public byte[] FileBytes { get; set; }
        }

        public static string FindLatestVersion(string filePath)
        {
            var directory = Path.GetDirectoryName(filePath);
            var baseFileName = Path.GetFileNameWithoutExtension(filePath).Split(new[] { "-v(" }, StringSplitOptions.None)[0];
            var extension = Path.GetExtension(filePath);

            var regex = new Regex($@"^{Regex.Escape(baseFileName)}-v\((\d+)\){Regex.Escape(extension)}$", RegexOptions.IgnoreCase);

            var latestVersion = -1;
            var latestFile = filePath;
            bool foundVersionedFile = false;

            if (Directory.Exists(directory))
            {
                foreach (var file in Directory.GetFiles(directory, $"{baseFileName}*{extension}"))
                {
                    var match = regex.Match(Path.GetFileName(file));
                    if (match.Success)
                    {
                        foundVersionedFile = true;
                        var version = int.Parse(match.Groups[1].Value);
                        if (version > latestVersion)
                        {
                            latestVersion = version;
                            latestFile = file;
                        }
                    }
                }
            }

            if (!foundVersionedFile && System.IO.File.Exists(filePath)) { return filePath; }
            if (!System.IO.File.Exists(latestFile)) { return filePath; }

            return latestFile;
        }

        private static JsonElement ParseOpenXmlElement(OpenXmlElement element, int id, MainDocumentPart mainPart)
        {
            var jsonElement = new JsonElement { ElementId = id };

            if (element is Paragraph para)
            {
                var checkBox = para.Descendants<FormFieldData>().FirstOrDefault(f => f.GetFirstChild<CheckBox>() != null);
                if (checkBox != null)
                {
                    jsonElement.Type = "CheckBox";
                    var checkboxElement = checkBox.GetFirstChild<CheckBox>();
                    var checkedProp = checkboxElement.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();
                    jsonElement.Content = new JsonCheckBox
                    {
                        IsChecked = checkedProp != null,
                        Text = para.InnerText.Trim()
                    };
                }
                else
                {
                    jsonElement.Type = "Paragraph";
                    jsonElement.Content = new JsonParagraph { Text = para.InnerText };
                }
            }
            else if (element is Table table)
            {
                jsonElement.Type = "Table";
                var jsonTable = new JsonTable();
                foreach (var row in table.Elements<TableRow>())
                {
                    var jsonRow = new List<JsonTableCell>();
                    foreach (var cell in row.Elements<TableCell>())
                    {
                        var jsonCell = new JsonTableCell();
                        int nestedId = 0;
                        foreach (var cellElement in cell.Elements())
                        {
                            nestedId++;
                            var parsedChild = ParseOpenXmlElement(cellElement, nestedId, mainPart);
                            if (parsedChild != null) { jsonCell.Elements.Add(parsedChild); }
                        }
                        jsonRow.Add(jsonCell);
                    }
                    jsonTable.Rows.Add(jsonRow);
                }
                jsonElement.Content = jsonTable;
            }
            else if (element.Descendants<Drawing>().Any())
            {
                var drawing = element.Descendants<Drawing>().FirstOrDefault();
                var blip = drawing?.Descendants<DocumentFormat.OpenXml.Drawing.Blip>().FirstOrDefault();
                if (blip != null && blip.Embed != null && mainPart.GetPartById(blip.Embed.Value) is ImagePart imagePart)
                {
                    using (var stream = imagePart.GetStream())
                    using (var ms = new MemoryStream())
                    {
                        stream.CopyTo(ms);
                        jsonElement.Type = "Image";
                        jsonElement.Content = new JsonImage
                        {
                            Base64 = Convert.ToBase64String(ms.ToArray()),
                            ContentType = imagePart.ContentType
                        };
                    }
                }
            }

            return jsonElement.Type != null ? jsonElement : null;
        }

        public static JsonPayload ConvertDocxToJson(string filePath)
        {
            var documentElements = new List<JsonElement>();
            int elementId = 0;
            using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, false))
            {
                var body = wordDoc.MainDocumentPart.Document.Body;
                foreach (var element in body.Elements())
                {
                    elementId++;
                    var parsedElement = ParseOpenXmlElement(element, elementId, wordDoc.MainDocumentPart);
                    if (parsedElement != null)
                    {
                        documentElements.Add(parsedElement);
                    }
                }
            }
            return new JsonPayload { Elements = documentElements, FileVersionPath = filePath.Replace(HttpRuntime.AppDomainAppPath, "") };
        }

        private static void UpdateElements(List<OpenXmlElement> docElements, List<JsonElement> savedElements)
        {
            foreach (var savedEl in savedElements)
            {
                if (savedEl.ElementId > 0 && savedEl.ElementId <= docElements.Count)
                {
                    var docEl = docElements[savedEl.ElementId - 1];

                    if (savedEl.Type == "Paragraph" && docEl is Paragraph docPara)
                    {
                        var savedPara = JsonConvert.DeserializeObject<JsonParagraph>(savedEl.Content.ToString());
                        if (docPara.InnerText.Trim() != savedPara.Text.Trim())
                        {
                            var firstRun = docPara.Elements<Run>().FirstOrDefault();
                            var runProps = firstRun?.RunProperties?.CloneNode(true);
                            docPara.RemoveAllChildren<Run>();
                            var newRun = new Run();
                            if (runProps != null) { newRun.Append(runProps); }
                            newRun.Append(new Text(savedPara.Text) { Space = SpaceProcessingModeValues.Preserve });
                            docPara.Append(newRun);
                        }
                    }
                    else if (savedEl.Type == "CheckBox" && docEl is Paragraph paraWithCheckbox)
                    {
                        var checkBoxData = paraWithCheckbox.Descendants<FormFieldData>().FirstOrDefault(f => f.GetFirstChild<CheckBox>() != null);
                        if (checkBoxData != null)
                        {
                            var savedCheck = JsonConvert.DeserializeObject<JsonCheckBox>(savedEl.Content.ToString());
                            var checkboxElement = checkBoxData.GetFirstChild<CheckBox>();
                            var checkedProp = checkboxElement.GetFirstChild<DocumentFormat.OpenXml.Wordprocessing.Checked>();

                            if (savedCheck.IsChecked && checkedProp == null)
                            {
                                checkboxElement.Append(new DocumentFormat.OpenXml.Wordprocessing.Checked());
                            }
                            else if (!savedCheck.IsChecked && checkedProp != null)
                            {
                                checkedProp.Remove();
                            }
                        }
                    }
                    else if (savedEl.Type == "Table" && docEl is Table docTable)
                    {
                        var savedTable = JsonConvert.DeserializeObject<JsonTable>(savedEl.Content.ToString());
                        var docRows = docTable.Elements<TableRow>().ToList();
                        for (int i = 0; i < savedTable.Rows.Count && i < docRows.Count; i++)
                        {
                            var savedRow = savedTable.Rows[i];
                            var docRow = docRows[i];
                            var docCells = docRow.Elements<TableCell>().ToList();
                            for (int j = 0; j < savedRow.Count && j < docCells.Count; j++)
                            {
                                UpdateElements(docCells[j].Elements<OpenXmlElement>().ToList(), savedRow[j].Elements);
                            }
                        }
                    }
                }
            }
        }

        public static FileResult ConvertJsonToDocx(string jsonInput, string appPath, string recordID)
        {
            var payload = JsonConvert.DeserializeObject<JsonPayload>(jsonInput);
            var templatePath = payload.FileVersionPath;
            if (!Path.IsPathRooted(templatePath))
            {
                templatePath = Path.Combine(appPath, templatePath);
            }

            if (!System.IO.File.Exists(templatePath)) { throw new FileNotFoundException("The template version specified in the JSON was not found.", templatePath); }

            byte[] templateBytes = System.IO.File.ReadAllBytes(templatePath);

            using (MemoryStream memStream = new MemoryStream())
            {
                memStream.Write(templateBytes, 0, templateBytes.Length);
                using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(memStream, true))
                {
                    var body = wordDoc.MainDocumentPart.Document.Body;
                    UpdateElements(body.Elements<OpenXmlElement>().ToList(), payload.Elements);

                    if (!string.IsNullOrEmpty(recordID) && invoice.IsValidUniqueId(recordID))
                    {
                        AddFooter(body, recordID);
                    }

                    wordDoc.MainDocumentPart.Document.Save();
                }
                return new FileResult { Success = true, FileBytes = memStream.ToArray() };
            }
        }

        public static object ConvertXlsxToJson(string filePath)
        {
            Workbook workbook = new Workbook();
            workbook.LoadFromFile(filePath);
            Worksheet sheet = workbook.Worksheets[0];
            var table = new List<Dictionary<string, object>>();
            var headers = new List<string>();
            for (int c = 1; c <= sheet.LastColumn; c++)
            {
                headers.Add(sheet.Range[1, c].Value2?.ToString() ?? $"Column{c}");
            }

            for (int r = 2; r <= sheet.LastRow; r++)
            {
                var row = new Dictionary<string, object>();
                for (int c = 1; c <= headers.Count; c++)
                {
                    row[headers[c - 1]] = sheet.Range[r, c].Value2;
                }
                table.Add(row);
            }
            return new JsonPayload { Elements = new List<JsonElement> { new JsonElement { Content = table } }, FileVersionPath = filePath.Replace(HttpRuntime.AppDomainAppPath, "") };
        }

        public static FileResult ConvertJsonToXlsx(string jsonInput, string appPath)
        {
            var payload = JsonConvert.DeserializeObject<JsonPayload>(jsonInput);
            var templatePath = payload.FileVersionPath;
            if (!Path.IsPathRooted(templatePath))
            {
                templatePath = Path.Combine(appPath, templatePath);
            }

            Workbook workbook = new Workbook();
            if (System.IO.File.Exists(templatePath)) { workbook.LoadFromFile(templatePath); }
            else { workbook.Worksheets.Add("Sheet1"); }

            Worksheet sheet = workbook.Worksheets[0];
            var firstElementContent = payload.Elements.FirstOrDefault()?.Content;
            var tableData = JsonConvert.DeserializeObject<List<Dictionary<string, object>>>(firstElementContent.ToString());

            if (tableData != null && tableData.Any())
            {
                var headers = tableData.First().Keys.ToList();
                for (int c = 0; c < headers.Count; c++) { sheet.Range[1, c + 1].Value = headers[c]; }

                for (int r = 0; r < tableData.Count; r++)
                {
                    for (int c = 0; c < headers.Count; c++)
                    {
                        sheet.Range[r + 2, c + 1].Value = tableData[r][headers[c]]?.ToString();
                    }
                }
            }

            using (MemoryStream ms = new MemoryStream())
            {
                workbook.SaveToStream(ms, Spire.Xls.FileFormat.Version2016);
                return new FileResult { Success = true, FileBytes = ms.ToArray() };
            }
        }

        private static void AddFooter(Body body, string recordID)
        {
            DataTable dtRecord = DBHelper.gettabel("select Document_number, Document_date, Email, begin_date from DC_Documents_records_single_id('" + recordID.Replace("'", "''") + "')");
            if (dtRecord.Rows.Count > 0)
            {
                string documentNumber = dtRecord.Rows[0]["Document_number"].ToString();
                DateTime createdTime = Convert.ToDateTime(dtRecord.Rows[0]["begin_date"]);
                string userCreated = dtRecord.Rows[0]["Email"].ToString();
                string userPrinted = DBHelper.UserEmail("");
                DateTime printTime = DateTime.Now;

                body.Append(new Paragraph());
                body.Append(CreateFooterTable(documentNumber, createdTime, userCreated, userPrinted, printTime));
            }
        }

        private static Table CreateFooterTable(string docNum, DateTime createdTime, string userCreated, string userPrinted, DateTime printTime)
        {
            Table table = new Table();
            TableProperties props = new TableProperties(new TableWidth() { Width = "5000", Type = TableWidthUnitValues.Pct });
            table.AppendChild(props);
            TableRow row = new TableRow();
            row.Append(
                CreateTableCell($"Doc Num:({docNum})"),
                CreateTableCell($"Created: {createdTime:yyyy-MM-dd hh:mm tt}"),
                CreateTableCell($"By: {userCreated}"),
                CreateTableCell($"Printed By: {userPrinted}"),
                CreateTableCell($"Print Time: {printTime:yyyy-MM-dd hh:mm tt}")
            );
            table.Append(row);
            return table;
        }

        private static TableCell CreateTableCell(string text)
        {
            return new TableCell(new Paragraph(new Run(new Text(text) { Space = SpaceProcessingModeValues.Preserve })));
        }
    }

    public string GetPar(string key, HttpRequestBase request) => Mas.com.eg.Models.invoice.GetPar(key, request);
}
@{
    string id = ViewBag.id ?? "";
    string dataResult = "";
    string contentType = "application/json; charset=utf-8";
    byte[] fileBytes = null;
    Layout = null;

    string appPath = HttpRuntime.AppDomainAppPath;

    try
    {
        if (id == "read")
        {
            string relativePath = GetPar("filePath", Request);
            string fullPath = Path.Combine(appPath, relativePath);
            string latestVersionPath = DocumentConverter.FindLatestVersion(fullPath);

            if (!System.IO.File.Exists(latestVersionPath)) { throw new FileNotFoundException("Template file not found.", latestVersionPath); }

            object jsonData;
            string extension = Path.GetExtension(latestVersionPath).ToLower();
            if (extension == ".xlsx")
            {
                jsonData = DocumentConverter.ConvertXlsxToJson(latestVersionPath);
            }
            else
            {
                jsonData = DocumentConverter.ConvertDocxToJson(latestVersionPath);
            }
            dataResult = JsonConvert.SerializeObject(new { success = true, json = jsonData });
        }
        else if (id == "write" || id == "pdf" || id == "html")
        {
            string jsonInput = GetPar("jsonInput", Request);
            string recordID = GetPar("recordid", Request);

            DocumentConverter.FileResult result;
            string fileVersionPath = JsonConvert.DeserializeObject<DocumentConverter.JsonPayload>(jsonInput).FileVersionPath;

            if (Path.GetExtension(fileVersionPath).ToLower() == ".xlsx")
            {
                result = DocumentConverter.ConvertJsonToXlsx(jsonInput, appPath);
                contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            }
            else
            {
                result = DocumentConverter.ConvertJsonToDocx(jsonInput, appPath, recordID);
                contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            }

            if (!result.Success) { throw new Exception(result.Message); }

            fileBytes = result.FileBytes;

            if (id == "pdf" && fileBytes != null)
            {
                using (var docxStream = new MemoryStream(fileBytes))
                {
                    var document = new Spire.Doc.Document(docxStream, Spire.Doc.FileFormat.Docx);
                    using (var pdfStream = new MemoryStream())
                    {
                        document.SaveToStream(pdfStream, Spire.Doc.FileFormat.PDF);
                        fileBytes = pdfStream.ToArray();
                    }
                }
                contentType = "application/pdf";
            }
            else if (id == "html" && fileBytes != null)
            {
                using (var docxStream = new MemoryStream(fileBytes))
                {
                    var document = new Spire.Doc.Document(docxStream, Spire.Doc.FileFormat.Docx);
                    document.HtmlExportOptions.ImageEmbedded = true;
                    using (var htmlStream = new MemoryStream())
                    {
                        document.SaveToStream(htmlStream, Spire.Doc.FileFormat.Html);
                        fileBytes = htmlStream.ToArray();
                    }
                }
                contentType = "text/html";
            }
        }
        else if (id == "upload_new_file")
        {
            string relativePath = GetPar("p", Request);
            if (Request.Files.Count == 0) { throw new Exception("No file uploaded."); }

            HttpPostedFileBase uploadedFile = Request.Files[0];
            string fileName = Path.GetFileName(uploadedFile.FileName);

            string saveDir = Path.Combine(appPath, "Docs", relativePath, "Forms");
            if (!Directory.Exists(saveDir)) { Directory.CreateDirectory(saveDir); }

            string baseFilePath = Path.Combine(saveDir, fileName);
            string finalSavePath = baseFilePath;

            if (System.IO.File.Exists(baseFilePath))
            {
                int version = 1;
                string baseFileName = Path.GetFileNameWithoutExtension(baseFilePath);
                string extension = Path.GetExtension(baseFilePath);
                while (System.IO.File.Exists(Path.Combine(saveDir, $"{baseFileName}-v({version}){extension}")))
                {
                    version++;
                }
                finalSavePath = Path.Combine(saveDir, $"{baseFileName}-v({version}){extension}");
            }

            uploadedFile.SaveAs(finalSavePath);
            dataResult = JsonConvert.SerializeObject(new { success = true, message = $"File uploaded to {finalSavePath.Replace(appPath, "")}" });
        }
        else
        {
            throw new Exception("Invalid action specified.");
        }
    }
    catch (Exception ex)
    {
        Response.StatusCode = 500;
        dataResult = JsonConvert.SerializeObject(new { success = false, message = ex.Message, stackTrace = ex.StackTrace });
    }

    if (fileBytes != null)
    {
        string filePathParam = GetPar("filePath", Request);
        string fileName = "document";
        if (!string.IsNullOrEmpty(filePathParam))
        {
            fileName = Path.GetFileName(filePathParam);
        }

        string extension = Path.GetExtension(fileName);
        if (id == "pdf") { extension = ".pdf"; }
        if (id == "html") { extension = ".html"; }

        Response.AddHeader("Content-Disposition", $"attachment; filename=\"{Path.GetFileNameWithoutExtension(fileName)}{extension}\"");
        Response.ContentType = contentType;
        Response.BinaryWrite(fileBytes);
    }
    else
    {
        Response.ContentType = "application/json; charset=utf-8";
        Response.Write(dataResult);
    }

    Response.Flush();
    Response.End();
}
